# HAVE: OPTION
- have: Option<T>
  want: T
  panics: true
  candidates:
    - "expect(self, msg: &str)"
    - "unwrap(self)"
- have: Option<T>
  given:
    - type: T
      desc: &default_desc "A default value"
  want: T
  candidates: "unwrap_or(self, default: T)"
- have: Option<T>
  given:
    - type: "F: Fn() -> T"
      desc: "A function to compute the default value"
  want: T
  candidates: "unwrap_or_else(self, f: F)"
- have: Option<T>
  want: T
  candidates: "unwrap_or_default(self)"
- have: Option<T>
  given:
    - type: "F: Fn(T) -> U"
      desc: &map_desc A function to compute the new value given the old one
  want: Option<U>
  candidates: "map(self, f: F)"
- have: Option<T>
  given:
    - type: U
      desc: A default value
    - type: "F: Fn(T) -> U"
      desc: *map_desc
  want: U
  candidates: "map_or(self, default: U, f: F)"
- have: Option<T>
  given:
    - type: "D: Fn() -> U"
      desc: A function to compute a default value
    - type: "F: Fn(T) -> U"
      desc: *map_desc
  want: U
  candidates: "map_or_else(self, default: D, f: F)"
- have: Option<T>
  given:
    - type: E
      desc: An error value
  want: Result<T, E>
  candidates: "ok_or(self, err: E)"
- have: Option<T>
  given:
    - type: "F: Fn() -> E"
      desc: A function to compute an error value
  want: Result<T, E>
  candidates: "ok_or_else(self, err: F)"
- have: Option<T>
  given:
    - type: Option<U>
      desc: Another Option
  want: Option<U>
  candidates: "and(self, optb: Option<U>)"
- have: Option<T>
  given:
    - type: "F: Fn(T) -> Option<U>"
      desc: A function to compute a new Option given the current value
  want: Option<U>
  candidates: "and_then(self, f: F)"
- have: Option<T>
  given:
    - type: Option<T>
      desc: Another Option
  want: Option<T>
  candidates: "or(self, optb: Option<U>)"
- have: Option<T>
  given:
    - type: "F: Fn() -> Option<T>"
      desc: A function to compute another Option
  want: Option<T>
  candidates: "or_else(self, f: F)"
- have: Option<T>
  given:
    - type: "P: Fn(&T) -> bool"
      desc: A predicate taking a reference to the current value
  want: Option<T>
  candidates: "filter(self, predicate: P)"
- have: Option<T>
  given:
    - type: Option<T>
      desc: Another Option
  want: Option<T>
  candidates: "xor(self, optb: Option<T>)"
- have: Option<Result<T, E>>
  want: Result<Option<T>, E>
  candidates: "transpose(self)"
- have: Option<Option<T>>
  want: Option<T>
  candidates: "flatten(self)"

# HAVE: RESULT
- have: Result<T, E>
  want: Option<T>
  candidates: "ok(self)"
- have: Result<T, E>
  want: Option<E>
  candidates: "err(self)"
- have: Result<T, E>
  given:
    - type: "F: Fn(T) -> U"
      desc: *map_desc
  want: Result<U, E>
  candidates: "map(self, f: F)"
- have: Result<T, E>
  given:
    - type: U
      desc: *default_desc
    - type: "F: Fn(T) -> U"
      desc: *map_desc
  want: U
  candidates: "map_or(self, default: U, f: F)"
- have: Result<T, E>
  given:
    - type: "D: Fn(E) -> U"
      desc: "A function to compute a default value given the error value"
    - type: "F: Fn(T) -> U"
      desc: *map_desc
  want: U
  candidates: "map_or_else(self, default: D, f: F)"
- have: Result<T, E>
  given:
    - type: "O: Fn(E) -> F"
      desc: "A function to compute a new error value given the old error value"
  want: Result<T, F>
  candidates: "map_err(self, op: D)"
- have: Result<T, E>
  given:
    - type: "Result<U, E>"
      desc: "Another Result"
  want: Result<U, E>
  candidates: "and(self, res: Result<U, E>)"
- have: Result<T, E>
  given:
    - type: "F: Fn(T) -> Result<U, E>"
      desc: "A function to compute another Result given the current value"
  want: Result<U, E>
  candidates: "and_then(self, op: F)"
- have: Result<T, E>
  given:
    - type: "Result<T, F>"
      desc: "Another Result"
  want: Result<T, F>
  candidates: "or(self, res: Result<T, F>)"
- have: Result<T, E>
  given:
    - type: "O: Fn(E) -> Result<T, F>"
      desc: "A function to compute another Result given the current error"
  want: Result<T, F>
  candidates: "or_else(self, op: O)"
- have: Result<T, E>
  given:
    - type: T
      desc: *default_desc
  want: T
  candidates: "unwrap_or(self, default: T)"
- have: Result<T, E>
  given:
    - type: "F: Fn(E) -> T"
      desc: "A function to compute a value given the current error"
  want: T
  candidates: "unwrap_or_else(self, op: F)"
- have: Result<T, E>
  want: T
  candidates:
    - "unwrap(self)"
    - "expect(self, msg: &str)"
- have: Result<T, E>
  want: E
  candidates:
    - "unwrap_err(self)"
    - "expect_err(self, msg: &str)"
- have: Result<T, E>
  want: T
  candidates: "unwrap_or_default(self)"
- have: Result<Option<T>, E>
  want: Option<Result<T, E>>
  candidates: "transpose(self)"